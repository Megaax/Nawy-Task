# name: CI/CD

# on:
#   push:
#     branches: [ "main" ]
#     tags: [ "*" ]
#   pull_request:
#     branches: [ "main" ]

# concurrency:
#   group: ${{ github.workflow }}-${{ github.ref }}
#   cancel-in-progress: true

# permissions:
#   contents: read
#   packages: write   # needed to push to GHCR

# jobs:
#   lint:
#     name: Lint (Node)
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4

#       - name: Setup Node
#         uses: actions/setup-node@v4
#         with:
#           node-version: 20
#           cache: npm

#       - name: Install deps
#         run: npm ci

#       # Prefer a project lint script. If you donâ€™t have one yet,
#       # add it (see notes below).
#       - name: Run lint
#         run: |
#           if npm run -s | grep -q "^  lint$"; then
#             npm run lint
#           else
#             echo "No lint script found. Skipping. (Add an npm 'lint' script for real checks.)"
#           fi

#   build-and-push:
#     name: Build & Push Docker image
#     runs-on: ubuntu-latest
#     needs: lint
#     if: ${{ github.event_name != 'pull_request' }}  # push images only on main/tags, not PRs
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

#       # Log in to GitHub Container Registry (GHCR)
#       - name: Login to GHCR
#         uses: docker/login-action@v3
#         with:
#           registry: ghcr.io
#           username: ${{ github.actor }}
#           password: ${{ secrets.GITHUB_TOKEN }}

#       # (Optional) Log in to Docker Hub if secrets are provided
#       - name: Login to Docker Hub
#         uses: docker/login-action@v3
#         with:
#           username: ${{ secrets.DOCKERHUB_USERNAME }}
#           password: ${{ secrets.DOCKERHUB_TOKEN }}

#       # Generate tags/labels for GHCR + Docker Hub
#       - name: Docker meta
#         id: meta
#         uses: docker/metadata-action@v5
#         with:
#           images: |
#             ghcr.io/${{ github.repository_owner }}/node-hello
#             ${{ secrets.DOCKERHUB_USERNAME && format('{0}/node-hello', secrets.DOCKERHUB_USERNAME) }}
#           tags: |
#             type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
#             type=ref,event=branch
#             type=ref,event=tag
#             type=sha

#       - name: Build & push
#         uses: docker/build-push-action@v6
#         with:
#           context: .
#           push: true
#           tags: ${{ steps.meta.outputs.tags }}
#           labels: ${{ steps.meta.outputs.labels }}
#           cache-from: type=gha
#           cache-to: type=gha,mode=max
name: CI/CD

on:
  push:
    branches: [ "main" ]
    tags: [ "*" ]
  pull_request:
    branches: [ "main" ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write   # needed to push to GHCR

jobs:
  lint:
    name: Lint (Node)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # --- Secret leak scan (Gitleaks) ---
      - name: Scan repo for secrets with Gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --source . --no-git --redact --verbose

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install deps
        run: npm ci

      - name: Run lint
        run: |
          if npm run -s | grep -q "^  lint$"; then
            npm run lint
          else
            echo "No lint script found. Skipping. (Add an npm 'lint' script for real checks.)"
          fi

  build-and-push:
    name: Build & Push Docker image
    runs-on: ubuntu-latest
    needs: lint
    if: ${{ github.event_name != 'pull_request' }}  # push images only on main/tags, not PRs
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Log in to GitHub Container Registry (GHCR)
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # (Optional) Log in to Docker Hub if secrets are provided
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Generate tags/labels for GHCR + Docker Hub
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository_owner }}/node-hello
            ${{ secrets.DOCKERHUB_USERNAME && format('{0}/node-hello', secrets.DOCKERHUB_USERNAME) }}
          tags: |
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=ref,event=branch
            type=ref,event=tag
            type=sha

      - name: Build & push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  terraform-apply:
    name: Terraform (init/plan/apply)
    runs-on: ubuntu-latest
    needs: build-and-push
    if: ${{ github.event_name != 'pull_request' }}  # don't apply infra on PRs
    env:
      AWS_REGION: ${{ secrets.AWS_REGION || 'eu-central-1' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Configure AWS (using access keys in repo secrets)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform fmt (check)
        working-directory: terraform
        run: terraform fmt -check -diff

      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Terraform Validate
        working-directory: terraform
        run: terraform validate

      - name: Terraform Plan
        working-directory: terraform
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        working-directory: terraform
        run: terraform apply -auto-approve tfplan

      - name: Terraform Destroy (cleanup)
        working-directory: terraform
        run: terraform destroy -auto-approve
